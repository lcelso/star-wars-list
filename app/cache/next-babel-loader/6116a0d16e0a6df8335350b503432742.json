{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/celsoalves/Public/projects/star-wars-quiz/hocs/withApollo.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nvar _require = require('apollo-link-schema'),\n    SchemaLink = _require.SchemaLink;\n\nvar _require2 = require('../apollo/utils/schema'),\n    schema = _require2.schema;\n\nimport { createHttpLink } from \"apollo-link-http\";\nvar globalApolloClient = null;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApollo(PageComponent) {\n  var _this = this;\n\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    var displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = function _callee(ctx) {\n      var AppTree, apolloClient, pageProps, _await$import, getDataFromTree, apolloState;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              AppTree = ctx.AppTree;\n              apolloClient = ctx.apolloClient = initApolloClient();\n              pageProps = {};\n\n              if (!PageComponent.getInitialProps) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(PageComponent.getInitialProps(ctx));\n\n            case 6:\n              pageProps = _context.sent;\n\n            case 7:\n              if (!false) {\n                _context.next = 24;\n                break;\n              }\n\n              if (!(ctx.res && ctx.res.finished)) {\n                _context.next = 10;\n                break;\n              }\n\n              return _context.abrupt(\"return\", pageProps);\n\n            case 10:\n              if (!ssr) {\n                _context.next = 24;\n                break;\n              }\n\n              _context.prev = 11;\n              _context.next = 14;\n              return _regeneratorRuntime.awrap(import('@apollo/react-ssr'));\n\n            case 14:\n              _await$import = _context.sent;\n              getDataFromTree = _await$import.getDataFromTree;\n              _context.next = 18;\n              return _regeneratorRuntime.awrap(getDataFromTree(__jsx(AppTree, {\n                pageProps: _objectSpread({}, pageProps, {\n                  apolloClient: apolloClient\n                }),\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 61,\n                  columnNumber: 15\n                }\n              })));\n\n            case 18:\n              _context.next = 23;\n              break;\n\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](11);\n              // Prevent Apollo Client GraphQL errors from crashing SSR.\n              // Handle them in components via the data.error prop:\n              // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n              console.error('Error while running `getDataFromTree`', _context.t0);\n\n            case 23:\n              Head.rewind();\n\n            case 24:\n              apolloState = apolloClient.cache.extract();\n              return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                apolloState: apolloState\n              }));\n\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[11, 20]], Promise);\n    };\n  }\n\n  return WithApollo;\n}\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\n\nfunction initApolloClient(initialState) {\n  if (false) {\n    return createApolloClient(initialState);\n  }\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState);\n  }\n\n  return globalApolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var ssrMode = false;\n  var cache = new InMemoryCache().restore(initialState); // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  return new ApolloClient({\n    ssrMode: ssrMode,\n    link: createIsomorphLink(),\n    cache: cache\n  });\n}\n\nfunction createIsomorphLink() {\n  if (false) {\n    return new SchemaLink({\n      schema: schema\n    });\n  } else {\n    return createHttpLink({\n      uri: '/api/graphql',\n      credentials: 'same-origin'\n    });\n  }\n}","map":{"version":3,"sources":["/Users/celsoalves/Public/projects/star-wars-quiz/hocs/withApollo.js"],"names":["React","Head","ApolloProvider","ApolloClient","InMemoryCache","require","SchemaLink","schema","createHttpLink","globalApolloClient","withApollo","PageComponent","ssr","WithApollo","apolloClient","apolloState","pageProps","client","initApolloClient","displayName","name","console","warn","getInitialProps","ctx","AppTree","res","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","ssrMode","restore","link","createIsomorphLink","uri","credentials"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nconst { SchemaLink } = require('apollo-link-schema');\nconst { schema } = require('../apollo/utils/schema');\nimport { createHttpLink } from \"apollo-link-http\";\n\nlet globalApolloClient = null\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent, { ssr = true } = {}) {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = apolloClient || initApolloClient(apolloState)\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    )\n  }\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component'\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.')\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const { AppTree } = ctx\n      const apolloClient = (ctx.apolloClient = initApolloClient())\n\n      let pageProps = {}\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx)\n      }\n\n      if (typeof window === 'undefined') {\n        if (ctx.res && ctx.res.finished) {\n          return pageProps\n        }\n\n        if (ssr) {\n          try {\n            const { getDataFromTree } = await import('@apollo/react-ssr')\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient,\n                }}\n              />\n            )\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error)\n          }\n\n          Head.rewind()\n        }\n      }\n\n      const apolloState = apolloClient.cache.extract()\n\n      return {\n        ...pageProps,\n        apolloState,\n      }\n    }\n  }\n\n  return WithApollo\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\nfunction initApolloClient(initialState) {\n  if (typeof window === 'undefined') {\n    return createApolloClient(initialState)\n  }\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState)\n  }\n\n  return globalApolloClient\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nfunction createApolloClient(initialState = {}) {\n  const ssrMode = typeof window === 'undefined'\n  const cache = new InMemoryCache().restore(initialState)\n\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode,\n    link: createIsomorphLink(),\n    cache,\n  })\n}\n\nfunction createIsomorphLink() {\n  if (typeof window === 'undefined') {\n    return new SchemaLink({ schema })\n  } else {\n    return createHttpLink({\n      uri: '/api/graphql',\n      credentials: 'same-origin',\n    });\n  }\n}"]},"metadata":{},"sourceType":"module"}