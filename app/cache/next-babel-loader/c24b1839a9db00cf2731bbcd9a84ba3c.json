{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar dtos = require('../../dtos/Characters');\n\nvar dtosChar = require('../../dtos/Characters/char');\n\nvar dtosListChar = require('../../dtos/Characters/list-chars');\n\nvar chars = require('../../utils/chars-mock');\n\nmodule.exports = {\n  Query: {\n    allCharacters: function allCharacters(_, _ref, _ref2) {\n      var page, dataLoaders, response;\n      return _regeneratorRuntime.async(function allCharacters$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              page = _ref.page;\n              dataLoaders = _ref2.dataLoaders;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(dataLoaders.charactersLoader.load(page));\n\n            case 4:\n              response = _context.sent;\n\n              if (!(response === 404)) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\", dtos.characters(chars[\"default\"]));\n\n            case 7:\n              return _context.abrupt(\"return\", dtos.characters(response));\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    \"char\": function char(_, _ref3, _ref4) {\n      var page, dataLoaders, response;\n      return _regeneratorRuntime.async(function char$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              page = _ref3.page;\n              dataLoaders = _ref4.dataLoaders;\n              chars[\"default\"].page = page;\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(dataLoaders.charactersLoader.load(page));\n\n            case 5:\n              response = _context2.sent;\n\n              if (!(response === 404)) {\n                _context2.next = 8;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", dtosChar.characters(chars[\"default\"]));\n\n            case 8:\n              return _context2.abrupt(\"return\", dtos.characters(response));\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    charsNames: function charsNames(_, _ref5, _ref6) {\n      var page, dataLoaders, response;\n      return _regeneratorRuntime.async(function charsNames$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              page = _ref5.page;\n              dataLoaders = _ref6.dataLoaders;\n              chars[\"default\"].page = page;\n              _context3.next = 5;\n              return _regeneratorRuntime.awrap(dataLoaders.charactersLoader.load(page));\n\n            case 5:\n              response = _context3.sent;\n\n              if (!(response === 404)) {\n                _context3.next = 8;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", dtosListChar.characters(chars[\"default\"]));\n\n            case 8:\n              return _context3.abrupt(\"return\", dtos.characters(response));\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }\n};","map":{"version":3,"sources":["/Users/celsoalves/Public/projects/star-wars-quiz/apollo/resolvers/Characters/index.js"],"names":["dtos","require","dtosChar","dtosListChar","chars","module","exports","Query","allCharacters","_","page","dataLoaders","charactersLoader","load","response","characters","charsNames"],"mappings":";;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,uBAAD,CAApB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,4BAAD,CAAxB;;AACA,IAAME,YAAY,GAAGF,OAAO,CAAC,kCAAD,CAA5B;;AACA,IAAMG,KAAK,GAAGH,OAAO,CAAC,wBAAD,CAArB;;AAEAI,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,KAAK,EAAE;AACLC,IAAAA,aAAa,EAAE,uBAAOC,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAYC,cAAAA,IAAZ,QAAYA,IAAZ;AAAsBC,cAAAA,WAAtB,SAAsBA,WAAtB;AAAA;AAAA,+CACUA,WAAW,CAACC,gBAAZ,CAA6BC,IAA7B,CAAkCH,IAAlC,CADV;;AAAA;AACPI,cAAAA,QADO;;AAAA,oBAGTA,QAAQ,KAAK,GAHJ;AAAA;AAAA;AAAA;;AAAA,+CAGgBd,IAAI,CAACe,UAAL,CAAgBX,KAAK,WAArB,CAHhB;;AAAA;AAAA,+CAKNJ,IAAI,CAACe,UAAL,CAAgBD,QAAhB,CALM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADV;AAQL,YAAM,cAAOL,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAYC,cAAAA,IAAZ,SAAYA,IAAZ;AAAsBC,cAAAA,WAAtB,SAAsBA,WAAtB;AACJP,cAAAA,KAAK,WAAL,CAAcM,IAAd,GAAqBA,IAArB;AADI;AAAA,+CAEmBC,WAAW,CAACC,gBAAZ,CAA6BC,IAA7B,CAAkCH,IAAlC,CAFnB;;AAAA;AAEEI,cAAAA,QAFF;;AAAA,oBAIAA,QAAQ,KAAK,GAJb;AAAA;AAAA;AAAA;;AAAA,gDAIyBZ,QAAQ,CAACa,UAAT,CAAoBX,KAAK,WAAzB,CAJzB;;AAAA;AAAA,gDAMGJ,IAAI,CAACe,UAAL,CAAgBD,QAAhB,CANH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KARD;AAgBLE,IAAAA,UAAU,EAAE,oBAAOP,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAYC,cAAAA,IAAZ,SAAYA,IAAZ;AAAsBC,cAAAA,WAAtB,SAAsBA,WAAtB;AACVP,cAAAA,KAAK,WAAL,CAAcM,IAAd,GAAqBA,IAArB;AADU;AAAA,+CAEaC,WAAW,CAACC,gBAAZ,CAA6BC,IAA7B,CAAkCH,IAAlC,CAFb;;AAAA;AAEJI,cAAAA,QAFI;;AAAA,oBAINA,QAAQ,KAAK,GAJP;AAAA;AAAA;AAAA;;AAAA,gDAImBX,YAAY,CAACY,UAAb,CAAwBX,KAAK,WAA7B,CAJnB;;AAAA;AAAA,gDAMHJ,IAAI,CAACe,UAAL,CAAgBD,QAAhB,CANG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhBP;AADQ,CAAjB","sourcesContent":["const dtos = require('../../dtos/Characters');\nconst dtosChar = require('../../dtos/Characters/char');\nconst dtosListChar = require('../../dtos/Characters/list-chars');\nconst chars = require('../../utils/chars-mock');\n\nmodule.exports = {\n  Query: {\n    allCharacters: async (_, { page }, { dataLoaders }) => {\n      const response = await dataLoaders.charactersLoader.load(page);\n\n      if (response === 404) return dtos.characters(chars.default);\n      \n      return dtos.characters(response);\n    },\n    char: async (_, { page }, { dataLoaders }) => {\n      chars.default.page = page;\n      const response = await dataLoaders.charactersLoader.load(page);\n\n      if (response === 404) return dtosChar.characters(chars.default);\n\n      return dtos.characters(response);\n    },\n    charsNames: async (_, { page }, { dataLoaders }) => {\n      chars.default.page = page;\n      const response = await dataLoaders.charactersLoader.load(page);\n\n      if (response === 404) return dtosListChar.characters(chars.default);\n\n      return dtos.characters(response);\n    }\n  },\n};\n"]},"metadata":{},"sourceType":"script"}