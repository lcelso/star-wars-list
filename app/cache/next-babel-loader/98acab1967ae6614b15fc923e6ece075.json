{"ast":null,"code":"var _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nmodule.exports = {\n  characters: function characters(_ref) {\n    var results = _ref.results;\n    var characters = [];\n    results.forEach(function (item, index) {\n      characters.push({\n        id: index + 1,\n        name: item.name\n      });\n    });\n    var charactersInfo = {\n      characters: characters\n    };\n    return _objectSpread({}, charactersInfo);\n  }\n};","map":{"version":3,"sources":["/Users/celsoalves/Public/projects/star-wars-quiz/apollo/dtos/Characters/list-chars.js"],"names":["module","exports","characters","results","forEach","item","index","push","id","name","charactersInfo"],"mappings":";;;;;;AAAAA,MAAM,CAACC,OAAP,GAAkB;AAChBC,EAAAA,UAAU,EAAE,0BAEN;AAAA,QADJC,OACI,QADJA,OACI;AACJ,QAAID,UAAU,GAAG,EAAjB;AAEAC,IAAAA,OAAO,CAACC,OAAR,CAAgB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC/BJ,MAAAA,UAAU,CAACK,IAAX,CAAgB;AACdC,QAAAA,EAAE,EAAEF,KAAK,GAAG,CADE;AAEdG,QAAAA,IAAI,EAAEJ,IAAI,CAACI;AAFG,OAAhB;AAID,KALD;AAOA,QAAMC,cAAc,GAAG;AACrBR,MAAAA,UAAU,EAAVA;AADqB,KAAvB;AAIA,6BACKQ,cADL;AAGD;AApBe,CAAlB","sourcesContent":["module.exports = ({\n  characters: ({\n    results\n  }) => {\n    let characters = [];\n\n    results.forEach((item, index) => {\n      characters.push({\n        id: index + 1,\n        name: item.name,\n      });\n    });\n\n    const charactersInfo = {\n      characters\n    };\n\n    return {\n      ...charactersInfo,\n    };\n  },\n});\n"]},"metadata":{},"sourceType":"script"}