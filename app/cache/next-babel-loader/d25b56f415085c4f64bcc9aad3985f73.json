{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nmodule.exports = {\n  characters: ({\n    next,\n    previous,\n    results\n  }) => {\n    let characters = [];\n    results.forEach((item, index) => {\n      characters.push({\n        id: index + 1,\n        name: item.name,\n        height: item.height,\n        mass: item.mass,\n        hair_color: item.hair_color,\n        skin_color: item.skin_color,\n        eye_color: item.eye_color,\n        birth_year: item.birth_year,\n        gender: item.gender,\n        starships: item.starships,\n        url: item.url\n      });\n    });\n    const charactersInfo = {\n      characters,\n      pages: [{\n        next: next,\n        previous: previous\n      }]\n    };\n    return _objectSpread({}, charactersInfo);\n  }\n};","map":{"version":3,"sources":["/Users/celsoalves/Public/projects/star-wars-quiz/apollo/dtos/Characters/index.js"],"names":["module","exports","characters","next","previous","results","forEach","item","index","push","id","name","height","mass","hair_color","skin_color","eye_color","birth_year","gender","starships","url","charactersInfo","pages"],"mappings":";;;;;;AAAAA,MAAM,CAACC,OAAP,GAAkB;AAChBC,EAAAA,UAAU,EAAE,CAAC;AACXC,IAAAA,IADW;AAEXC,IAAAA,QAFW;AAGXC,IAAAA;AAHW,GAAD,KAIN;AACJ,QAAIH,UAAU,GAAG,EAAjB;AAEAG,IAAAA,OAAO,CAACC,OAAR,CAAgB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC/BN,MAAAA,UAAU,CAACO,IAAX,CAAgB;AACdC,QAAAA,EAAE,EAAEF,KAAK,GAAG,CADE;AAEdG,QAAAA,IAAI,EAAEJ,IAAI,CAACI,IAFG;AAGdC,QAAAA,MAAM,EAAEL,IAAI,CAACK,MAHC;AAIdC,QAAAA,IAAI,EAAEN,IAAI,CAACM,IAJG;AAKdC,QAAAA,UAAU,EAAEP,IAAI,CAACO,UALH;AAMdC,QAAAA,UAAU,EAAER,IAAI,CAACQ,UANH;AAOdC,QAAAA,SAAS,EAAET,IAAI,CAACS,SAPF;AAQdC,QAAAA,UAAU,EAAEV,IAAI,CAACU,UARH;AASdC,QAAAA,MAAM,EAAEX,IAAI,CAACW,MATC;AAUdC,QAAAA,SAAS,EAAEZ,IAAI,CAACY,SAVF;AAWdC,QAAAA,GAAG,EAAEb,IAAI,CAACa;AAXI,OAAhB;AAaD,KAdD;AAgBA,UAAMC,cAAc,GAAG;AACrBnB,MAAAA,UADqB;AAErBoB,MAAAA,KAAK,EAAE,CAAC;AACNnB,QAAAA,IAAI,EAAEA,IADA;AAENC,QAAAA,QAAQ,EAAGA;AAFL,OAAD;AAFc,KAAvB;AAQA,6BACKiB,cADL;AAGD;AAnCe,CAAlB","sourcesContent":["module.exports = ({\n  characters: ({\n    next,\n    previous,\n    results,\n  }) => {\n    let characters = [];\n\n    results.forEach((item, index) => {\n      characters.push({\n        id: index + 1,\n        name: item.name,\n        height: item.height,\n        mass: item.mass,\n        hair_color: item.hair_color,\n        skin_color: item.skin_color,\n        eye_color: item.eye_color,\n        birth_year: item.birth_year,\n        gender: item.gender,\n        starships: item.starships,\n        url: item.url\n      });\n    });\n\n    const charactersInfo = {\n      characters,\n      pages: [{\n        next: next,\n        previous:  previous,\n      }]\n    };\n\n    return {\n      ...charactersInfo,\n    };\n  },\n});\n"]},"metadata":{},"sourceType":"script"}