{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/celsoalves/Public/projects/star-wars-quiz/components/Picture/index.js\";\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query Picture($name: String) {\\n    picture(name: $name)\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport styled from 'styled-components';\nimport LoadingComponent from \"../Loading\";\nimport ErrorComponent from \"../Error\";\nvar PICTURE = gql(_templateObject());\nvar indisponivel = '/images/indisponivel.png';\nvar Color = styled.span.withConfig({\n  displayName: \"Picture__Color\",\n  componentId: \"wyesjz-0\"\n})([\"background-image:url('\", \"');background-size:cover;height:200px;width:200px;display:flex;\"], function (props) {\n  return props.bgImage ? props.bgImage : indisponivel;\n});\n\nvar Picture = function Picture(item) {\n  var name = item.name;\n\n  var _useQuery = useQuery(PICTURE, {\n    variables: {\n      name: name\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  if (loading) return __jsx(LoadingComponent, {\n    icon: \"ThreeDots\",\n    height: \"40\",\n    width: \"40\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 23\n    }\n  });\n  if (error) return __jsx(ErrorComponent, {\n    error: error,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 21\n    }\n  });\n  return __jsx(Color, {\n    bgImage: data.picture,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  });\n};\n\nexport default Picture;","map":{"version":3,"sources":["/Users/celsoalves/Public/projects/star-wars-quiz/components/Picture/index.js"],"names":["React","gql","useQuery","styled","LoadingComponent","ErrorComponent","PICTURE","indisponivel","Color","span","props","bgImage","Picture","item","name","variables","data","loading","error","picture"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,gBAAP,MAA6B,YAA7B;AACA,OAAOC,cAAP,MAA2B,UAA3B;AAEA,IAAMC,OAAO,GAAGL,GAAH,mBAAb;AAKA,IAAMM,YAAY,GAAG,0BAArB;AAEA,IAAMC,KAAK,GAAGL,MAAM,CAACM,IAAV;AAAA;AAAA;AAAA,kGACgB,UAACC,KAAD;AAAA,SAAYA,KAAK,CAACC,OAAN,GAAgBD,KAAK,CAACC,OAAtB,GAAgCJ,YAA5C;AAAA,CADhB,CAAX;;AAQA,IAAMK,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAU;AAAA,MAChBC,IADgB,GACPD,IADO,CAChBC,IADgB;;AAAA,kBAESZ,QAAQ,CAACI,OAAD,EAAU;AACjDS,IAAAA,SAAS,EAAE;AAAED,MAAAA,IAAI,EAAEA;AAAR;AADsC,GAAV,CAFjB;AAAA,MAEhBE,IAFgB,aAEhBA,IAFgB;AAAA,MAEVC,OAFU,aAEVA,OAFU;AAAA,MAEDC,KAFC,aAEDA,KAFC;;AAMxB,MAAID,OAAJ,EAAa,OAAO,MAAC,gBAAD;AAAkB,IAAA,IAAI,EAAC,WAAvB;AAAmC,IAAA,MAAM,EAAC,IAA1C;AAA+C,IAAA,KAAK,EAAC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACb,MAAIC,KAAJ,EAAW,OAAO,MAAC,cAAD;AAAgB,IAAA,KAAK,EAAEA,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAEX,SAAQ,MAAC,KAAD;AAAO,IAAA,OAAO,EAAEF,IAAI,CAACG,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR;AACD,CAVD;;AAYA,eAAeP,OAAf","sourcesContent":["import React from 'react';\n\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport styled from 'styled-components';\n\nimport LoadingComponent from '@components/Loading';\nimport ErrorComponent from '@components/Error';\n\nconst PICTURE = gql`\n  query Picture($name: String) {\n    picture(name: $name)\n  }\n`\nconst indisponivel = '/images/indisponivel.png';\n\nconst Color = styled.span`\n  background-image: url('${(props) => (props.bgImage ? props.bgImage : indisponivel)}');\n  background-size: cover;\n  height: 200px;\n  width: 200px;\n  display: flex;\n`;\n\nconst Picture = (item) => {\n  const { name } = item;\n  const { data, loading, error } = useQuery(PICTURE, {\n    variables: { name: name },\n  });\n\n  if (loading) return <LoadingComponent icon=\"ThreeDots\" height=\"40\" width=\"40\" />;\n  if (error) return <ErrorComponent error={error} />\n\n  return (<Color bgImage={data.picture} />)\n}\n\nexport default Picture;\n\n\n"]},"metadata":{},"sourceType":"module"}