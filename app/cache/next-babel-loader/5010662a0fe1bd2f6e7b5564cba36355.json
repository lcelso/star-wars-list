{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nmodule.exports = {\n  characters: ({\n    page,\n    results\n  }) => {\n    const char = results.filter((item, index) => index + 1 === page);\n    let characters = [];\n    char.forEach((item, index) => {\n      characters.push({\n        id: index + 1,\n        name: item.name,\n        height: item.height,\n        mass: item.mass,\n        hair_color: item.hair_color,\n        skin_color: item.skin_color,\n        eye_color: item.eye_color,\n        birth_year: item.birth_year,\n        gender: item.gender,\n        starships: item.starships,\n        url: item.url\n      });\n    });\n    const charactersInfo = {\n      characters\n    };\n    return _objectSpread({}, charactersInfo);\n  }\n};","map":{"version":3,"sources":["/Users/celsoalves/Public/projects/star-wars-quiz/apollo/dtos/Characters/char.js"],"names":["module","exports","characters","page","results","char","filter","item","index","forEach","push","id","name","height","mass","hair_color","skin_color","eye_color","birth_year","gender","starships","url","charactersInfo"],"mappings":";;;;;;AAAAA,MAAM,CAACC,OAAP,GAAkB;AAChBC,EAAAA,UAAU,EAAE,CAAC;AACXC,IAAAA,IADW;AAEXC,IAAAA;AAFW,GAAD,KAGN;AACJ,UAAMC,IAAI,GAAGD,OAAO,CAACE,MAAR,CAAe,CAACC,IAAD,EAAOC,KAAP,KAAiBA,KAAK,GAAC,CAAN,KAAYL,IAA5C,CAAb;AACA,QAAID,UAAU,GAAG,EAAjB;AAEAG,IAAAA,IAAI,CAACI,OAAL,CAAa,CAACF,IAAD,EAAOC,KAAP,KAAiB;AAC5BN,MAAAA,UAAU,CAACQ,IAAX,CAAgB;AACdC,QAAAA,EAAE,EAAEH,KAAK,GAAG,CADE;AAEdI,QAAAA,IAAI,EAAEL,IAAI,CAACK,IAFG;AAGdC,QAAAA,MAAM,EAAEN,IAAI,CAACM,MAHC;AAIdC,QAAAA,IAAI,EAAEP,IAAI,CAACO,IAJG;AAKdC,QAAAA,UAAU,EAAER,IAAI,CAACQ,UALH;AAMdC,QAAAA,UAAU,EAAET,IAAI,CAACS,UANH;AAOdC,QAAAA,SAAS,EAAEV,IAAI,CAACU,SAPF;AAQdC,QAAAA,UAAU,EAAEX,IAAI,CAACW,UARH;AASdC,QAAAA,MAAM,EAAEZ,IAAI,CAACY,MATC;AAUdC,QAAAA,SAAS,EAAEb,IAAI,CAACa,SAVF;AAWdC,QAAAA,GAAG,EAAEd,IAAI,CAACc;AAXI,OAAhB;AAaD,KAdD;AAiBA,UAAMC,cAAc,GAAG;AACrBpB,MAAAA;AADqB,KAAvB;AAIA,6BACKoB,cADL;AAGD;AAhCe,CAAlB","sourcesContent":["module.exports = ({\n  characters: ({\n    page,\n    results\n  }) => {\n    const char = results.filter((item, index) => index+1 === page);\n    let characters = [];\n\n    char.forEach((item, index) => {\n      characters.push({\n        id: index + 1,\n        name: item.name,\n        height: item.height,\n        mass: item.mass,\n        hair_color: item.hair_color,\n        skin_color: item.skin_color,\n        eye_color: item.eye_color,\n        birth_year: item.birth_year,\n        gender: item.gender,\n        starships: item.starships,\n        url: item.url\n      });\n    });\n\n\n    const charactersInfo = {\n      characters\n    };\n\n    return {\n      ...charactersInfo,\n    };\n  },\n});\n"]},"metadata":{},"sourceType":"script"}