{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/celsoalves/Public/projects/star-wars-quiz/pages/details.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query Char($number: Int) {\\n    char(page: $number) {\\n      characters {\\n        id\\n        name\\n        height\\n        mass\\n        gender\\n        homeworld\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { withApollo } from '../hocs/withApollo';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport Link from 'next/link';\nimport styled from 'styled-components';\nimport { PointsConsumer } from '../context/Points';\nimport PictureComponent from \"../components/Picture\";\nimport LoadingComponent from \"../components/Loading\";\nimport ErrorComponent from \"../components/Error\";\nimport HeaderComponent from \"../components/Header\";\nvar CHAR = gql(_templateObject());\nvar Grid = styled.div.withConfig({\n  displayName: \"details__Grid\",\n  componentId: \"iprogc-0\"\n})([\"display:grid;grid-template-columns:repeat(1,1fr);grid-template-rows:repeat(1,1fr);justify-items:center;align-items:center;\"]);\nvar Card = styled.div.withConfig({\n  displayName: \"details__Card\",\n  componentId: \"iprogc-1\"\n})([\"background-image:url('/images/card_open.png');width:311.88px;height:500px;display:flex;justify-content:center;align-items:center;border-radius:30px;margin:20px 0;\"]);\nvar List = styled.ul.withConfig({\n  displayName: \"details__List\",\n  componentId: \"iprogc-2\"\n})([\"list-style:none;background:#FFFFFF;padding:15px;margin-top:110px;color:#000000;\"]);\nvar Button = styled.button.withConfig({\n  displayName: \"details__Button\",\n  componentId: \"iprogc-3\"\n})([\"background-color:#FCE62E;color:#000000;border:none;font-size:14px;padding:20px;font-weight:bold;outline:none;\"]);\n\nvar User = function User(_ref) {\n  var user = _ref.user,\n      props = _ref.props;\n\n  var _useQuery = useQuery(CHAR, {\n    variables: {\n      number: user\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  if (loading) return __jsx(LoadingComponent, {\n    icon: \"Puff\",\n    height: \"100\",\n    width: \"100\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 23\n    }\n  });\n  if (error) return __jsx(ErrorComponent, {\n    error: error,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  });\n  var characters = data[\"char\"].characters;\n  return __jsx(PointsConsumer, {\n    value: props,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, function (context) {\n    var actCorrects = context.correct;\n    var actErrors = context.error;\n    var actPoints = context.points;\n\n    if (characters[0].name === context.choice) {\n      context.points = actPoints + 10;\n      context.correct = actCorrects + 1;\n    } else {\n      context.points = actPoints - 10;\n      context.error = actErrors + 1;\n    }\n\n    return __jsx(React.Fragment, null, __jsx(Grid, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, __jsx(HeaderComponent, {\n      total: context,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 15\n      }\n    }), __jsx(Card, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 15\n      }\n    }, __jsx(List, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }, __jsx(\"li\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 19\n      }\n    }, __jsx(PictureComponent, {\n      name: characters[0].name,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }\n    })), __jsx(\"li\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 19\n      }\n    }, \"Name: \", characters[0].name), __jsx(\"li\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 19\n      }\n    }, \"Height: \", characters[0].height), __jsx(\"li\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 19\n      }\n    }, \"Mass: \", characters[0].mass), __jsx(\"li\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 19\n      }\n    }, \"Gender: \", characters[0].gender))), __jsx(Link, {\n      href: \"/\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 15\n      }\n    }, __jsx(Button, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 30\n      }\n    }, \"Voltar para home\"))));\n  });\n};\n\nUser.getInitialProps = function _callee(_ref2) {\n  var id, _char;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          id = _ref2.query.id;\n          _char = parseInt(id);\n          return _context.abrupt(\"return\", {\n            user: _char\n          });\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default withApollo(User);","map":{"version":3,"sources":["/Users/celsoalves/Public/projects/star-wars-quiz/pages/details.js"],"names":["withApollo","gql","useQuery","Link","styled","PointsConsumer","PictureComponent","LoadingComponent","ErrorComponent","HeaderComponent","CHAR","Grid","div","Card","List","ul","Button","button","User","user","props","variables","number","data","loading","error","characters","context","actCorrects","correct","actErrors","actPoints","points","name","choice","height","mass","gender","getInitialProps","id","query","char","parseInt"],"mappings":"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","sourcesContent":["import { withApollo } from '../hocs/withApollo';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport Link from 'next/link';\nimport styled from 'styled-components';\n\nimport { PointsConsumer } from '../context/Points';\n\nimport PictureComponent from '@components/Picture';\nimport LoadingComponent from '@components/Loading';\nimport ErrorComponent from '@components/Error';\nimport HeaderComponent from '@components/Header';\n\nconst CHAR = gql`\n  query Char($number: Int) {\n    char(page: $number) {\n      characters {\n        id\n        name\n        height\n        mass\n        gender\n        homeworld\n      }\n    }\n  }\n`\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n  grid-template-rows: repeat(1, 1fr);\n  justify-items: center;\n  align-items: center;\n`;\n\nconst Card = styled.div`\n  background-image: url('/images/card_open.png');\n  width: 311.88px;\n  height: 500px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 30px;\n  margin: 20px 0;\n`;\n\nconst List = styled.ul`\n  list-style: none;\n  background: #FFFFFF;\n  padding: 15px;\n  margin-top: 110px;\n  color: #000000;\n`\n\nconst Button = styled.button`\n  background-color: #FCE62E;\n  color: #000000;\n  border: none;\n  font-size: 14px;\n  padding: 20px;\n  font-weight: bold;\n  outline: none;\n`\n\nconst User = ({ user, props }) => {\n  const { data, loading, error } = useQuery(CHAR, {\n    variables: { number: user },\n  });\n\n  if (loading) return <LoadingComponent icon=\"Puff\" height=\"100\" width=\"100\" />;\n  if (error) return <ErrorComponent error={error} />\n\n  const { char: { characters }} = data;\n\n  return (\n    <PointsConsumer value={props}>\n        {context => {\n          const actCorrects = context.correct;\n          const actErrors = context.error;\n          const actPoints = context.points;\n\n          if (characters[0].name === context.choice) {\n            context.points = actPoints + 10;\n            context.correct = actCorrects + 1;\n          } else {\n            context.points = actPoints - 10;\n            context.error = actErrors + 1;\n          }\n        \n          return (\n            <>\n            <Grid>\n              <HeaderComponent total={context} />\n\n              <Card>\n                <List>\n                  <li>\n                    <PictureComponent name={characters[0].name} />\n                  </li>\n                  <li>Name: {characters[0].name}</li>\n                  <li>Height: {characters[0].height}</li>\n                  <li>Mass: {characters[0].mass}</li>\n                  <li>Gender: {characters[0].gender}</li>\n                </List>\n              </Card>\n              <Link href=\"/\"><Button>Voltar para home</Button></Link>\n            </Grid>\n            </>\n          )\n        }}\n      </PointsConsumer>\n  );\n}\n\nUser.getInitialProps = async ({ query: { id } }) => {\n  const char = parseInt(id);\n  return { user: char }\n}\n\nexport default withApollo(User);\n"]},"metadata":{},"sourceType":"module"}