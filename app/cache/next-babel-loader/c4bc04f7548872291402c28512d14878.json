{"ast":null,"code":"var _jsxFileName = \"/Users/celsoalves/Public/projects/star-wars-quiz/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { withApollo } from '../hocs/withApollo';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport Link from 'next/link';\nimport styled from 'styled-components';\nimport { PointsConsumer } from '../context/Points';\nimport LoadingComponent from \"../components/Loading\";\nimport ErrorComponent from \"../components/Error\";\nimport HeaderComponent from \"../components/Header\";\nimport SelectComponent from \"../components/Select\";\nconst ALLCHARACTERS = gql`\n  query AllCharacters($number: Int) {\n    allCharacters(page: $number) {\n      characters {\n        id\n        name\n      }\n    }\n  }\n`;\nconst Grid = styled.div.withConfig({\n  displayName: \"pages__Grid\",\n  componentId: \"f4aolq-0\"\n})([\"display:grid;grid-template-columns:repeat(5,1fr);grid-template-rows:repeat(2,1fr);grid-column-gap:5px;grid-row-gap:20px;justify-items:center;align-items:center;@media only screen  and (min-device-width:375px)  and (max-device-width:812px){grid-template-columns:repeat(2,1fr);}\"]);\nconst numberRandom = Math.floor(Math.random() * (4 - 1 + 1) + 1);\nconst url = `/images/card_close_v${numberRandom}.png`;\nconst Card = styled.div.withConfig({\n  displayName: \"pages__Card\",\n  componentId: \"f4aolq-1\"\n})([\"background-image:url(\", \");width:187px;height:315px;display:flex;justify-content:center;align-items:center;color:#000000;\"], url);\nconst List = styled.ul.withConfig({\n  displayName: \"pages__List\",\n  componentId: \"f4aolq-2\"\n})([\"list-style:none;padding:0;margin:220px 0 0 0;\"]);\nconst Button = styled.button.withConfig({\n  displayName: \"pages__Button\",\n  componentId: \"f4aolq-3\"\n})([\"background-color:#FCE62E;color:#000000;border:none;font-size:14px;margin-top:5px;width:100%;font-weight:bold;outline:none;\"]);\n\nconst Index = props => {\n  const {\n    0: choice,\n    1: setChoice\n  } = useState('');\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(ALLCHARACTERS, {\n    variables: {\n      number: 1\n    }\n  });\n  if (loading) return __jsx(LoadingComponent, {\n    icon: \"Puff\",\n    height: \"100\",\n    width: \"100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 23\n    }\n  });\n  if (error) return __jsx(ErrorComponent, {\n    error: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  });\n  const {\n    allCharacters: {\n      characters\n    }\n  } = data;\n\n  function handleChoice(value) {\n    setChoice(value);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(PointsConsumer, {\n    value: props,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, context => {\n    return __jsx(React.Fragment, null, __jsx(HeaderComponent, {\n      total: context,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 15\n      }\n    }), __jsx(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 15\n      }\n    }, characters.map(item => (context.choice = choice, __jsx(Card, {\n      key: item.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 19\n      }\n    }, __jsx(List, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }\n    }, __jsx(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 23\n      }\n    }, __jsx(SelectComponent, {\n      onChoice: handleChoice,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }\n    })), __jsx(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 23\n      }\n    }, __jsx(Link, {\n      href: `/details?id=${item.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 26\n      }\n    }, __jsx(Button, {\n      onClick: () => context.chosen = item.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 27\n      }\n    }, \"See\")))))))));\n  }));\n};\n\nexport default withApollo(Index);","map":{"version":3,"sources":["/Users/celsoalves/Public/projects/star-wars-quiz/pages/index.js"],"names":["React","useState","withApollo","gql","useQuery","Link","styled","PointsConsumer","LoadingComponent","ErrorComponent","HeaderComponent","SelectComponent","ALLCHARACTERS","Grid","div","numberRandom","Math","floor","random","url","Card","List","ul","Button","button","Index","props","choice","setChoice","data","loading","error","variables","number","allCharacters","characters","handleChoice","value","context","map","item","id","chosen"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { withApollo } from '../hocs/withApollo';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport Link from 'next/link';\nimport styled from 'styled-components';\n\nimport { PointsConsumer } from '../context/Points';\n\nimport LoadingComponent from '@components/Loading';\nimport ErrorComponent from '@components/Error';\nimport HeaderComponent from '@components/Header';\nimport SelectComponent from '@components/Select';\n\nconst ALLCHARACTERS = gql`\n  query AllCharacters($number: Int) {\n    allCharacters(page: $number) {\n      characters {\n        id\n        name\n      }\n    }\n  }\n`\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  grid-template-rows: repeat(2, 1fr);\n  grid-column-gap: 5px;\n  grid-row-gap: 20px;\n  justify-items: center;\n  align-items: center;\n\n  @media only screen \n  and (min-device-width : 375px) \n  and (max-device-width : 812px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`;\n\nconst numberRandom = Math.floor(Math.random() * (4 - 1 + 1) + 1);\nconst url = `/images/card_close_v${numberRandom}.png`;\n\nconst Card = styled.div`\n  background-image: url(${url});\n  width: 187px;\n  height: 315px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #000000;\n`;\n\nconst List = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 220px 0 0 0;\n`\n\nconst Button = styled.button`\n  background-color: #FCE62E;\n  color: #000000;\n  border: none;\n  font-size: 14px;\n  margin-top: 5px;\n  width: 100%;\n  font-weight: bold;\n  outline: none;\n`\n\nconst Index = (props) => {\n  const [choice, setChoice] = useState('');\n  const { data, loading, error } = useQuery(ALLCHARACTERS, {\n    variables: { number: 1 },\n  });\n\n  if (loading) return <LoadingComponent icon=\"Puff\" height=\"100\" width=\"100\" />;\n  if (error) return <ErrorComponent error={error} />\n  \n  const { allCharacters: { characters }} = data;\n\n  function handleChoice(value) {\n    setChoice(value);\n  }\n\n  return (\n    <>\n      <PointsConsumer value={props}>\n        {context => {\n          return (\n            <>\n              <HeaderComponent total={context} />\n              <Grid>\n                {characters.map((item) => (\n                  context.choice = choice,\n\n                  <Card key={item.id}>\n                    <List>\n                      <li>\n                        <SelectComponent onChoice={handleChoice} />\n                      </li>\n                      <li>\n                         <Link href={`/details?id=${item.id}`}>\n                          <Button onClick={() => context.chosen = item.id}>See</Button>\n                        </Link>\n                      </li>\n                    </List>\n                  </Card>\n                ))}\n              </Grid>\n            </>\n          )\n        }}\n      </PointsConsumer>\n    </>\n  );\n}\n\nexport default withApollo(Index)"]},"metadata":{},"sourceType":"module"}