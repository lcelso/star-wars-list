{"ast":null,"code":"var _jsxFileName = \"/Users/celsoalves/Public/projects/star-wars-quiz/hocs/withApollo.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nconst {\n  SchemaLink\n} = require('apollo-link-schema');\n\nconst {\n  schema\n} = require('../apollo/utils/schema');\n\nimport { createHttpLink } from \"apollo-link-http\";\nlet globalApolloClient = null;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApollo(PageComponent, {\n  ssr = true\n} = {}) {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    const client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const {\n        AppTree\n      } = ctx;\n      const apolloClient = ctx.apolloClient = initApolloClient();\n      let pageProps = {};\n\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      }\n\n      if (true) {\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        }\n\n        if (ssr) {\n          try {\n            const {\n              getDataFromTree\n            } = await import('@apollo/react-ssr');\n            await getDataFromTree(__jsx(AppTree, {\n              pageProps: _objectSpread({}, pageProps, {\n                apolloClient\n              }),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 15\n              }\n            }));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          }\n\n          Head.rewind();\n        }\n      }\n\n      const apolloState = apolloClient.cache.extract();\n      return _objectSpread({}, pageProps, {\n        apolloState\n      });\n    };\n  }\n\n  return WithApollo;\n}\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\n\nfunction initApolloClient(initialState) {\n  if (true) {\n    return createApolloClient(initialState);\n  }\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState);\n  }\n\n  return globalApolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\n\nfunction createApolloClient(initialState = {}) {\n  const ssrMode = true;\n  const cache = new InMemoryCache().restore(initialState); // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  return new ApolloClient({\n    ssrMode,\n    link: createIsomorphLink(),\n    cache\n  });\n}\n\nfunction createIsomorphLink() {\n  if (true) {\n    return new SchemaLink({\n      schema\n    });\n  } else {\n    return createHttpLink({\n      uri: '/api/graphql',\n      credentials: 'same-origin'\n    });\n  }\n}","map":{"version":3,"sources":["/Users/celsoalves/Public/projects/star-wars-quiz/hocs/withApollo.js"],"names":["React","Head","ApolloProvider","ApolloClient","InMemoryCache","SchemaLink","require","schema","createHttpLink","globalApolloClient","withApollo","PageComponent","ssr","WithApollo","apolloClient","apolloState","pageProps","client","initApolloClient","displayName","name","console","warn","getInitialProps","ctx","AppTree","res","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","ssrMode","restore","link","createIsomorphLink","uri","credentials"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nconst { SchemaLink } = require('apollo-link-schema');\nconst { schema } = require('../apollo/utils/schema');\nimport { createHttpLink } from \"apollo-link-http\";\n\nlet globalApolloClient = null\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent, { ssr = true } = {}) {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = apolloClient || initApolloClient(apolloState)\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    )\n  }\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component'\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.')\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const { AppTree } = ctx\n      const apolloClient = (ctx.apolloClient = initApolloClient())\n\n      let pageProps = {}\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx)\n      }\n\n      if (typeof window === 'undefined') {\n        if (ctx.res && ctx.res.finished) {\n          return pageProps\n        }\n\n        if (ssr) {\n          try {\n            const { getDataFromTree } = await import('@apollo/react-ssr')\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient,\n                }}\n              />\n            )\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error)\n          }\n\n          Head.rewind()\n        }\n      }\n\n      const apolloState = apolloClient.cache.extract()\n\n      return {\n        ...pageProps,\n        apolloState,\n      }\n    }\n  }\n\n  return WithApollo\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\nfunction initApolloClient(initialState) {\n  if (typeof window === 'undefined') {\n    return createApolloClient(initialState)\n  }\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState)\n  }\n\n  return globalApolloClient\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nfunction createApolloClient(initialState = {}) {\n  const ssrMode = typeof window === 'undefined'\n  const cache = new InMemoryCache().restore(initialState)\n\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode,\n    link: createIsomorphLink(),\n    cache,\n  })\n}\n\nfunction createIsomorphLink() {\n  if (typeof window === 'undefined') {\n    return new SchemaLink({ schema })\n  } else {\n    return createHttpLink({\n      uri: '/api/graphql',\n      credentials: 'same-origin',\n    });\n  }\n}"]},"metadata":{},"sourceType":"module"}